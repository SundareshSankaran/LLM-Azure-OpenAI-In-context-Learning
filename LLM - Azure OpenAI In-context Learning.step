{"name": "LLM - Azure OpenAI In-context Learning", "creationTimeStamp": "2025-02-05T16:57:36.829882Z", "modifiedTimeStamp": "2025-02-05T16:57:45.788565Z", "createdBy": "Sundaresh Sankaran and Crystal Baker", "modifiedBy": "Crystal Baker", "displayName": "LLM - Azure OpenAI In-context Learning", "localDisplayName": null, "properties": null, "links": null, "metadataVersion": null, "version": null, "type": "code", "flowMetadata": null, "ui": "{\"showPageContentOnly\": true, \"pages\": [{\"id\": \"params\", \"type\": \"page\", \"label\": \"Parameters\", \"children\": [{\"id\": \"section_input_params\", \"type\": \"section\", \"label\": \"Parameters\", \"open\": true, \"children\": [{\"id\": \"inputData\", \"type\": \"inputtable\", \"label\": \"Select input data:\", \"required\": true, \"placeholder\": \"\", \"visible\": \"\"}, {\"id\": \"textCol\", \"type\": \"columnselector\", \"label\": \"Select text column:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"docId\", \"type\": \"columnselector\", \"label\": \"Select ID column:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"copyVarList\", \"type\": \"columnselector\", \"label\": \"Select additional columns to copy over:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"section_prompts\", \"type\": \"section\", \"label\": \"Prompts\", \"open\": true, \"children\": [{\"id\": \"systemPrompt\", \"type\": \"textarea\", \"label\": \"Provide system prompt:\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_system_prompt\", \"type\": \"text\", \"text\": \"Use the system prompt to provide broad instructions to the LLM such as role, task description and response specification.\", \"visible\": \"\"}, {\"id\": \"userPrompt\", \"type\": \"textarea\", \"label\": \"Provide user prompt:\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_user_prompt\", \"type\": \"text\", \"text\": \"Use the user prompt to provide specific instructions on the task to perform.  Use tags like {Question}, {Context} etc. to refer to the context provided.\", \"visible\": \"\"}, {\"id\": \"userExample\", \"type\": \"textarea\", \"label\": \"Provide illustrative example(s):\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_user_example\", \"type\": \"text\", \"text\": \"Use the user example to provide 0, 1, or more illustrative examples of context and desired response from the LLM. Tag examples as Example: and Answer:.\", \"visible\": \"\"}]}]}, {\"id\": \"section_output_specs\", \"type\": \"section\", \"label\": \"Output specification\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"temperature\", \"type\": \"numstepper\", \"label\": \"Select temperature for output:\", \"required\": false, \"integer\": false, \"min\": null, \"max\": null, \"stepsize\": 1}, {\"id\": \"text_temperature\", \"type\": \"text\", \"text\": \"Use the temperature control to govern how the LLM generates its response based on next word prediction.\", \"visible\": \"\"}, {\"id\": \"outputTable\", \"type\": \"outputtable\", \"label\": \"Provide output table:\", \"required\": true, \"placeholder\": \"\", \"visible\": \"\"}]}]}, {\"id\": \"config\", \"type\": \"page\", \"label\": \"Configuration\", \"children\": [{\"id\": \"section_gen_model\", \"type\": \"section\", \"label\": \"Text generation model\", \"open\": true, \"children\": [{\"id\": \"genModelDeployment\", \"type\": \"textfield\", \"label\": \"Provide name of your Azure OpenAI generation model deployment:\", \"placeholder\": \"\", \"required\": true, \"visible\": \"\"}]}, {\"id\": \"section_azure_openai\", \"type\": \"section\", \"label\": \"Azure OpenAI service:\", \"open\": true, \"children\": [{\"id\": \"azureKeyLocation\", \"type\": \"path\", \"label\": \"Provide path to your Azure OpenAI key:\", \"pathtype\": \"file\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_key_details\", \"type\": \"text\", \"text\": \"Ensure this key is located in a file saved in a secure folder.\", \"visible\": \"\"}, {\"id\": \"azureOpenAIEndpoint\", \"type\": \"textfield\", \"label\": \"Provide URL for Azure OpenAI service endpoint:\", \"placeholder\": \"\", \"required\": true, \"visible\": \"\"}, {\"id\": \"azureRegion\", \"type\": \"textfield\", \"label\": \"Provide region for Azure OpenAI service\", \"placeholder\": \"Default value: eastus2\", \"required\": false, \"visible\": \"\"}, {\"id\": \"openAIVersion\", \"type\": \"textfield\", \"label\": \"OpenAI API Version\", \"placeholder\": \"2024-10-21\", \"required\": false, \"visible\": \"\"}]}]}, {\"id\": \"about\", \"type\": \"page\", \"label\": \"About\", \"children\": [{\"id\": \"about_description\", \"type\": \"text\", \"text\": \"LLM - Azure OpenAI In-context Learning==============================================This custom step helps you interact with a Large Language Model (LLM) calling an [Azure OpenAI](https://microsoftlearning.github.io/mslearn-openai/Instructions/Exercises/01-get-started-azure-openai.html) service to process simple instructions on specified input data. It uses an approach called In-context learning which uses provided examples to perform a task.  If no example is provided, then the LLM simply uses the provided context.  This is useful for cases where a call to an LLM does not require prior search, filter or query of data sources (such as what Retrieval Augmented Generation provides) . Run inside a SAS session, this custom step takes either a SAS dataset or a CAS table as input and returns a SAS dataset (or CAS table) as output, with the response added as a new variable.\", \"visible\": \"\"}, {\"id\": \"section_prereqs\", \"type\": \"section\", \"label\": \"Prerequisites\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"text_prereqs\", \"type\": \"text\", \"text\": \"1. Python is available to the SAS Viya Compute session.  2. Python packages to be installed:   i.  openai: https://pypi.org/project/openai/  ii.   pandas: https://pypi.org/project/pandas/  3. Viya 4 environment version 2025.01 or later 4. Valid Azure OpenAI service with large language models deployed.  Refer here for instructions: https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart?tabs=command-line%2Cpython-new&pivots=programming-language-studio\", \"visible\": \"\"}]}, {\"id\": \"section_assumptions\", \"type\": \"section\", \"label\": \"Assumptions\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"text_assumptions\", \"type\": \"text\", \"text\": \"Current assumptions for this initial versions (future versions may improve upon the same):1. Users  choose either a SAS dataset or Cloud Analytics Services (CAS) table as their input 2. User has already configured Azure OpenAI to deploy both an embedding function and LLM service, or knows the deployment names.\", \"visible\": \"\"}]}, {\"id\": \"about_parameters\", \"type\": \"section\", \"label\": \"Parameters\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"parameters_input\", \"type\": \"section\", \"label\": \"Input parameters\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"input_parameters_text\", \"type\": \"text\", \"text\": \"1. Input Data (input port, required): attach either a SAS dataset or a CAS table to the same.\\n2. Text column (column selector, required): select one column containing text to serve as context\\n3. ID column (column selector, required): select an ID column\\n4. System prompt (text area, required, boilerplate default): Provide a system prompt which is used to provide broad instructions about persona, range of tasks and response specification for LLM\\n5. User prompt (text area, required, boilerplate default): Provide a user prompt which specifies the task to perform\\n6. Illustrative example (text area, optional): Provide an example of task and response to help the LLM understand how to process instructions.\\n\", \"visible\": \"\"}]}, {\"id\": \"parameters_output_specs\", \"type\": \"section\", \"label\": \"Output specifications\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"output_parameters_text\", \"type\": \"text\", \"text\": \"1. Temperature (numeric stepper, default 0): temperature for an LLM affects its abiity to predict the next word when generating responses.  A rule of thumb is that a temperature closer to 0 indicates the model uses the predicted next word with the highest probability, whereas a temperature of 1 increases the randomness with which the model predicts the next word.  \\n2. Output table (output port, required): attach either a CAS table or sas7bdat to the output port of this node to hold results.  These results contain the LLM's answer, the original question and columns carried along.\", \"visible\": \"\"}]}, {\"id\": \"parameters_config\", \"type\": \"section\", \"label\": \"Configuration \", \"open\": 1, \"visible\": \"\", \"children\": [{\"id\": \"output_parameters_text_1\", \"type\": \"text\", \"text\": \"1. Text generation model (text field, required): provide the name of an Azure OpenAI text generation deployment.  For convenience, you may choose to use the same name as the OpenAI LLM. Example, gpt-35-turbo to gpt-35-turbo.\\n2. Azure OpenAI service details (file selector for key and text fields, required): provide a path to your Azure OpenAI access key.  Ensure this key is saved within a text file in a secure location on the filesystem.  Users are responsible for providing their keys to use this service.  In addition, also refer to your Azure OpenAI service to obtain the service endpoint and region. The OpenAI API version can be changed if required.\", \"visible\": \"\"}]}]}, {\"id\": \"about_runtimecontrol\", \"type\": \"section\", \"label\": \"Run-time Control\", \"open\": 0, \"visible\": \"\", \"children\": [{\"id\": \"runtimecontrol_text\", \"type\": \"text\", \"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.Refer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.The following macro variable,_aor_run_triggerwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.If you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.To \\\"disable\\\" this step, run the following code upstream:%global _aicl_run_trigger;%let _aicl_run_trigger =0;To \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):%let _aicl_run_trigger =1;IMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\", \"visible\": \"\"}]}, {\"id\": \"about_documentation\", \"type\": \"section\", \"label\": \"Documentation\", \"open\": 0, \"visible\": \"\", \"children\": [{\"id\": \"documentation_text\", \"type\": \"text\", \"text\": \"1.  Azure OpenAI service: https://learn.microsoft.com/en-us/azure/ai-services/openai/\\n2.  SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n3. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n4. OpenAI API versions change periodically. Keep track of them here: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation\", \"visible\": \"\"}]}, {\"id\": \"version_text\", \"type\": \"text\", \"text\": \"Version: 1.0  (05FEB2025)\", \"visible\": \"\"}, {\"id\": \"contact_text\", \"type\": \"text\", \"text\": \"Created/contact: \\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com) \\n- Crystal Baker (crystal.baker@sas.com)\", \"visible\": \"\"}]}], \"values\": {\"inputData\": {\"library\": \"\", \"table\": \"\"}, \"textCol\": [], \"docId\": [], \"copyVarList\": [], \"systemPrompt\": \"\", \"userPrompt\": \"\", \"temperature\": null, \"outputTable\": {\"library\": \"\", \"table\": \"\"}, \"genModelDeployment\": \"\", \"azureKeyLocation\": \"\", \"azureOpenAIEndpoint\": \"https://<your_openai_service>.azure.com/\", \"azureRegion\": \"eastus2\", \"openAIVersion\": \"2024-10-21\"}}", "templates": {"SAS": "/* SAS templated code goes here */\n\n/* -------------------------------------------------------------------------------------------* \n   LLM - Azure OpenAI In-context Learning\n\n   v 1.0.0 (03FEB2025)\n\n   This program interacts with an Azure OpenAI Large Language Model (LLM) service to process \n    instructions on specified input data  and is meant for use within a SAS Studio Custom \n   Step. Please modify requisite macro variables (hint: use the debug section as a reference) \n   to run this through other interfaces, such as a SAS Program editor or the SAS extension \n   for Visual Studio Code.\n\n   Sundaresh Sankaran (sundaresh.sankaran@sas.com|sundaresh.sankaran@gmail.com)\n   Crystal Baker (crystal.baker@sas.com)\n*-------------------------------------------------------------------------------------------- */\n\n/*-----------------------------------------------------------------------------------------*\n   DEBUG Section\n   Code under the debug section SHOULD ALWAYS remain commented unless you are tinkering with  \n   or testing the step!\n*------------------------------------------------------------------------------------------*/\n\n/* Provide test values for the parameters */\n/*\n\ncas ss;\ncaslib _all_ assign;\n\ndata PUBLIC.JOBCODES;\n   set SAMPSIO.JOBCODES;\nrun;\ndata WORK.JOBCODES;\n   set SAMPSIO.JOBCODES;\nrun;\n\n\ndata _null_;\n   call symput('inputData','PUBLIC.JOBCODES');\n   call symput('systemPrompt', 'Answer based on the illustrative example provided.');\n   call symput('userPrompt', 'Provide the job code for given context.');\n   call symputx('temperature', 0);\n   call symput('userExample', 'Example: What is the job code for a Tax Accountant 1? Answer:ACT001');\n   call symput('docId', 'JOBCODE');  \n   call symput('textCol', 'TITLE');\n   call symput('azureKeyLocation', \"sasserver:/mnt/viya-share/data/..\");\n   call symput('azureOpenAIEndpoint', \" \");\n   call symput('azureRegion', ' ');\n   call symput('openAIVersion', '2024-10-21');\n   call symput('outputTable', 'PUBLIC.ANSWER');\n   call symput('genModelDeployment', ' ');\n\nrun;\n\ndata _null_;\n   call symput('inputData_lib', scan(\"&inputData\", 1, \".\"));\n   call symput('inputData_name', scan(\"&inputData\", 2, \".\"));\nrun;\n\ndata _null_;\n   call symput('outputTable_lib', scan(\"&outputTable\", 1, \".\"));\n   call symput('outputTable_name', scan(\"&outputTable\", 2, \".\"));\nrun;\n\n*/;\n\n/*-----------------------------------------------------------------------------------------*\n   END DEBUG Section\n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\n\nfilename aiclcode temp;\n\ndata _null_;\n\n   length line $32767;               * max SAS character size ;\n   infile datalines4 truncover pad;\n   input ;   \n   file aiclcode;\n   line = strip(_infile_);           * line without leading and trailing blanks ;\n   l1 = length(trimn(_infile_));     * length of line without trailing blanks ;\n   l2 = length(line);                * length of line without leading and trailing blanks ;\n   first_position=l1-l2+1;           * position where the line should start (alignment) ;\n   if (line eq ' ') then put @1;     * empty line ;\n   else put @first_position line;    * line without leading and trailing blanks correctly aligned ;\n\n   datalines4;\n############################################################################################################\n#   Obtain values from UI\n############################################################################################################\ninput_data = SAS.symget('inputData')\noutput_table = SAS.symget('outputTable')\ninput_data_lib = SAS.symget('inputData_lib')\noutput_table_lib = SAS.symget('outputTable_lib')\ninput_data_name = SAS.symget('inputData_name')\noutput_table_name = SAS.symget('outputTable_name')\nsystem_prompt = SAS.symget('systemPrompt')\ntext_col = SAS.symget('textCol')\ndoc_id = SAS.symget('docId')\nuser_prompt = SAS.symget('userPrompt')\ntemperature = SAS.symget('temperature')\nuser_example = SAS.symget('userExample')\ndeployment_name = SAS.symget('genModelDeployment')\nazure_key = SAS.symget('azure_key')\nazure_openai_endpoint = SAS.symget('azureOpenAIEndpoint')\nazure_region = SAS.symget('azureRegion')\nazure_openai_version = SAS.symget('openAIVersion')\n_aicl_error_flag = SAS.symget('_aicl_error_flag')\n_aicl_error_desc = SAS.symget('_aicl_error_desc')\n_ip_sas_cas_flag = SAS.symget('_ip_sas_cas_flag')\n_op_sas_cas_flag = SAS.symget('_op_sas_cas_flag')\ninputData_caslib = SAS.symget('inputData_caslib')\noutputTable_caslib = SAS.symget('outputTable_caslib')\n_current_uuid_ = SAS.symget('_current_uuid_')\n\n\n\n\nprint(\"waiting for code contribution by Crystal\")\n\n############################################################################################################\n#   Functions\n############################################################################################################\n\n\n;;;;\nrun;   \n\n/*-----------------------------------------------------------------------------------------*\n   MACROS\n*------------------------------------------------------------------------------------------*/\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: A description to add to the error flag.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n   %global &errorFlagDesc.;\n\n%mend _create_error_flag;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to capture indicator and UUIDof any currently active CAS session.\n   UUID is not expensive and can be used in future to consider graceful reconnect.\n\n   Input:\n   1. errorFlagName: name of an error flag that gets populated in case the connection is \n                     not active. Provide this value in quotes when executing the macro.\n                     Define this as a global macro variable in order to use downstream.\n   2. errorFlagDesc: Name of a macro variable which can hold a descriptive message output\n                     from the check.\n                     \n   Output:\n   1. Informational note as required. We explicitly don't provide an error note since \n      there is an easy recourse(of being able to connect to CAS)\n   2. UUID of the session: macro variable which gets created if a session exists.\n   3. errorFlagName: populated\n   4. errorFlagDesc: populated\n*------------------------------------------------------------------------------------------*/\n\n%macro _env_cas_checkSession(errorFlagName, errorFlagDesc);\n    %global casSessionExists;\n    %put NOTE: Checking for an active CAS session. ;\n    %if %sysfunc(symexist(_current_uuid_)) %then %do;\n       %symdel _current_uuid_;\n    %end;\n    %if %sysfunc(symexist(_SESSREF_)) %then %do;\n      %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n      %put NOTE: CAS Session indicator - &casSessionExists. ;\n      %if &casSessionExists.=1 %then %do;\n         %global _current_uuid_;\n         %let _current_uuid_=;   \n         proc cas;\n            session.sessionId result = sessresults;\n            call symputx(\"_current_uuid_\", sessresults[1]);\n         quit;\n         %put NOTE: A CAS session &_SESSREF_. is currently active with UUID &_current_uuid_. ;\n         data _null_;\n            call symputx(\"&errorFlagName.\", 0);\n            call symput(\"&errorFlagDesc.\", \"CAS session is active.\");\n         run;\n      %end;\n      %else %do;\n         %put NOTE: Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream. ;\n         data _null_;\n            call symputx(\"&errorFlagName.\", 1);\n            call symput(\"&errorFlagDesc.\", \"Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream.\");\n        run;\n      %end;\n   %end;\n   %else %do;\n      %put NOTE: No active CAS session ;\n      data _null_;\n        call symputx(\"&errorFlagName.\", 1);\n        call symput(\"&errorFlagDesc.\", \"No active CAS session. Connect to a CAS session upstream.\");\n      run;\n   %end;\n\n%mend _env_cas_checkSession;   \n\n/*-----------------------------------------------------------------------------------------*\n   Caslib for a Libname macro\n   \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname\n   and assumes that the libname is using the CAS engine.\n \n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n   \n   From macro provided by Wilbram Hazejager (wilbram.hazejager@sas.com)\n\n   Inputs:\n   - _usr_LibrefUsingCasEngine : A library reference provided by the user which is based \n                                 on a CAS engine.\n   \n   Outputs:\n   - _usr_nameCaslib : Global macro variable containing the caslib name.\n*------------------------------------------------------------------------------------------*/\n \n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine);\n \n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n \n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n   /*--------------------------------------------------------------------------------------*\n      Note that we output a NOTE instead of an ERROR for the below condition since the \n      execution context determines whether this is an error or just an informational note.\n   *---------------------------------------------------------------------------------------*/\n   %if \"&_usr_nameCaslib.\" = \"\" %then %put NOTE: The caslib name for the &_usr_LibrefUsingCasEngine. is blank.;\n \n%mend _usr_getNameCaslib;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to check if a given libref belongs to a SAS or CAS engine.\n\n   Input:\n   1. sasCasLibref: a libref to be checked. Do not quote.\n   2. tableEngine: a flag to hold the table Engine value.\n   3. errorFlagName: a flag to populate an error code with.\n   4. errorFlagDesc: a flag to describe the error if one occurs.\n   5. sessionExists: an indicator (1) whether an active CAS session exists.  If not(0),\n                     it will be created.\n                     \n   Output:\n   1. tableEngine: populated with SAS or CAS\n   2. errorFlagName: populated with 1 if an error and 0 if not\n   3. errorFlagDesc: populated in case of an error\n*------------------------------------------------------------------------------------------*/\n\n%macro _sas_or_cas(sasCasLibref, tableEngine, errorFlagName, errorFlagDesc, sessionExists);\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ ;\n      caslib _ALL_ assign;\n   %end;\n\n    proc sql noprint;\n        select distinct Engine into:&&tableEngine. from dictionary.libnames where libname = upcase(\"&sasCasLibref.\");\n    quit;\n\n    %put \"&&&tableEngine.\";\n\n    %if %sysfunc(compress(\"&&&tableEngine.\")) = \"V9\" %THEN %DO;\n        data _null_;\n            call symput(\"&tableEngine.\",\"SAS\");\n            call symputx(\"&errorFlagName.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %end;\n    %else %if %sysfunc(compress(\"&&&tableEngine.\")) = \"CAS\" %THEN %DO;\n        data _null_;\n            call symputx(\"&errorFlagName.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %END;\n    %else %do;\n        data _null_;\n            call symputx(\"&errorFlagName.\",1);\n            call symput(\"&errorFlagDesc.\",\"Unable to associate libref with either SAS or CAS. Check the input libref provided.\");\n        run;\n    %end;\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ terminate;\n   %end;\n    \n%mend _sas_or_cas;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to identify whether a given folder location provided from a \n   SAS Studio Custom Step folder selector happens to be a SAS Content folder\n   or a folder on the filesystem (SAS Server).\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _path_identifier: Set inside macro, a global variable indicating the prefix of the \n      path provided.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Identify%20SAS%20Content%20or%20Server/macro_identify_sas_content_server.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _identify_content_or_server(pathReference);\n   %global _path_identifier;\n   data _null_;\n      call symput(\"_path_identifier\", scan(\"&pathReference.\",1,\":\",\"MO\"));\n   run;\n   %put NOTE: _path_identifier is &_path_identifier. ;\n%mend _identify_content_or_server;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _extract_sas_folder_path(pathReference);\n\n   %global _sas_folder_path;\n\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n\n%mend _extract_sas_folder_path;\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n\n   _aicl prefix stands for Azure In-context Learning\n*------------------------------------------------------------------------------------------*/\n%macro _aicl_execution_code;\n\n   %_create_error_flag(_aicl_error_flag, _aicl_error_desc);\n\n/*-----------------------------------------------------------------------------------------*\n    Check for a CAS session\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %_env_cas_checkSession(_aicl_error_flag, _aicl_error_desc);\n      %put NOTE: CAS session flag shows &casSessionExists. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Check for Input table engine name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %let _ip_sas_cas_flag=;\n      %_sas_or_cas(&inputData_lib., _ip_sas_cas_flag, _aicl_error_flag, _aicl_error_desc, &casSessionExists.)\n      %put NOTE: Input Table Engine - &_ip_sas_cas_flag. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    If Input table is in CAS, obtain the caslib name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %if %sysfunc(compress(\"&_ip_sas_cas_flag.\")) = \"CAS\" %then %do;\n         %_usr_getNameCaslib(&inputData_lib.);\n         %put NOTE: CASLIB name for &_ip_sas_cas_flag. - &_usr_nameCaslib. ;\n         %let inputData_caslib = &_usr_nameCaslib.;\n         %let _usr_nameCaslib =;\n      %end;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Check for Output table engine name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %let _op_sas_cas_flag=;\n      %_sas_or_cas(&outputTable_lib., _op_sas_cas_flag, _aicl_error_flag, _aicl_error_desc, &casSessionExists.)\n      %put NOTE: Output Table Engine - &_op_sas_cas_flag. ;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    If Output table is in CAS, obtain the caslib name.\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n      %if %sysfunc(compress(\"&_op_sas_cas_flag.\")) = \"CAS\" %then %do;\n         %_usr_getNameCaslib(&outputTable_lib.);\n         %put NOTE: CASLIB name for &_op_sas_cas_flag. - &_usr_nameCaslib. ;\n         %let outputTable_caslib = &_usr_nameCaslib.;\n         %let _usr_nameCaslib =;\n      %end;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if path for Azure Key Location  happens to be a filesystem (SAS Server) path. \n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %_identify_content_or_server(&azureKeyLocation.);\n\n      %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n         %put NOTE: Folder location prefixed with &_path_identifier. is on the SAS Server.;\n      %end;\n\n      %else %do;\n\n         %let _aicl_error_flag=1;\n         %put ERROR: Please select a valid file on the SAS Server (filesystem) containing your Azure OpenAI key.  Key should be in a secure location within filesystem. ;\n         data _null_;\n            call symputx(\"_aicl_error_desc\", \"Please select a valid file on the SAS Server (filesystem) containing your Azure OpenAI key.  Key should be in a secure location within filesystem.\");\n         run;\n      \n      %end;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %_extract_sas_folder_path(&azureKeyLocation.);\n\n      %if \"&_sas_folder_path.\" = \"\" %then %do;\n\n         %let _aicl_error_flag = 1;\n         %let _aicl_error_desc = The answer bank provided is empty, please select a valid path  ;\n         %put ERROR: &_aor_error_desc. ;\n\n      %end;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      %let _key_location = ;\n      %let _key_location = &_sas_folder_path.;\n      %let _sas_folder_path=;\n\n   %end;\n\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      data _null_;\n         infile \"&_key_location.\" lrecl=1000;\n         input @;\n         call symput(\"azure_key\",_INFILE_);\n      run;\n \n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n    Proceed for Python call\n*------------------------------------------------------------------------------------------*/\n   %if &_aicl_error_flag. = 0 %then %do;\n\n      proc python infile=aiclcode;\n      run;\n\n   %end;\n\n\n\n%mend _aicl_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n   \n/*-----------------------------------------------------------------------------------------*\n   Create Runtime Trigger\n*------------------------------------------------------------------------------------------*/\n%_create_runtime_trigger(_aicl_run_trigger);\n\n/*-----------------------------------------------------------------------------------------*\n   Execute \n*------------------------------------------------------------------------------------------*/\n\n%if &_aicl_run_trigger. = 1 %then %do;\n\n   %_aicl_execution_code;\n\n%end;\n\n%if &_aicl_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_aicl_error_flag. ;\n%put &_aicl_error_desc.;\n%put NOTE: Error desc - &_aicl_error_desc. ;\n\n/*-----------------------------------------------------------------------------------------*\n   END EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%if %symexist(_aicl_run_trigger) %then %do;\n   %symdel _aicl_run_trigger;\n%end;\n%if %symexist(_aicl_error_flag) %then %do;\n   %symdel _aicl_error_flag;\n%end;\n%if %symexist(_aicl_error_desc) %then %do;\n   %symdel _aicl_error_desc;\n%end;\n%if %symexist(casSessionExists) %then %do;\n   %symdel casSessionExists;\n%end;\n%if %symexist(_current_uuid_) %then %do;\n   %symdel _current_uuid_;\n%end;\n\n%sysmacdelete _create_runtime_trigger;\n%sysmacdelete _create_error_flag;\n%sysmacdelete _env_cas_checkSession;\n%sysmacdelete _usr_getNameCaslib;\n%sysmacdelete _identify_content_or_server;\n%sysmacdelete _extract_sas_folder_path;\n%sysmacdelete _sas_or_cas;\n%sysmacdelete _aicl_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   DEBUG Section\n   Code under the debug section SHOULD ALWAYS remain commented unless you are tinkering with  \n   or testing the step!\n*------------------------------------------------------------------------------------------*/\n/*\ncas ss terminate;;\n*/;\n/*-----------------------------------------------------------------------------------------*\n   END DEBUG Section\n*------------------------------------------------------------------------------------------*/\n"}}