{"name": "LLM - Azure OpenAI In-context Learning", "creationTimeStamp": "2025-01-31T14:39:10.140745Z", "modifiedTimeStamp": "2025-01-31T14:39:19.393692Z", "createdBy": "Sundaresh Sankaran and Crystal Baker", "modifiedBy": "Crystal Baker", "displayName": "LLM - Azure OpenAI In-context Learning", "localDisplayName": null, "properties": null, "links": null, "metadataVersion": null, "version": null, "type": "code", "flowMetadata": null, "ui": "{\"showPageContentOnly\": true, \"pages\": [{\"id\": \"params\", \"type\": \"page\", \"label\": \"Parameters\", \"children\": [{\"id\": \"section_input_params\", \"type\": \"section\", \"label\": \"Parameters\", \"open\": true, \"children\": [{\"id\": \"inputData\", \"type\": \"inputtable\", \"label\": \"Select input data:\", \"required\": true, \"placeholder\": \"\", \"visible\": \"\"}, {\"id\": \"textCol\", \"type\": \"columnselector\", \"label\": \"Select text column:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"docId\", \"type\": \"columnselector\", \"label\": \"Select ID column:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"copyVarList\", \"type\": \"columnselector\", \"label\": \"Select additional columns to copy over:\", \"include\": null, \"order\": false, \"columntype\": \"a\", \"max\": null, \"min\": null, \"visible\": \"\", \"table\": \"inputData\"}, {\"id\": \"section_prompts\", \"type\": \"section\", \"label\": \"Prompts\", \"open\": true, \"children\": [{\"id\": \"systemPrompt\", \"type\": \"textarea\", \"label\": \"Provide system prompt:\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_system_prompt\", \"type\": \"text\", \"text\": \"Use the system prompt to provide broad instructions to the LLM such as role, task description and response specification.\", \"visible\": \"\"}, {\"id\": \"userPrompt\", \"type\": \"textarea\", \"label\": \"Provide user prompt:\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_user_prompt\", \"type\": \"text\", \"text\": \"Use the user prompt to provide specific instructions on the task to perform.  Use tags like {Question}, {Context} etc. to refer to the context provided.\", \"visible\": \"\"}, {\"id\": \"userExample\", \"type\": \"textarea\", \"label\": \"Provide illustrative example(s):\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_user_example\", \"type\": \"text\", \"text\": \"Use the user example to provide 0, 1, or more illustrative examples of context and desired response from the LLM.\", \"visible\": \"\"}]}]}, {\"id\": \"section_output_specs\", \"type\": \"section\", \"label\": \"Output specification\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"temperature\", \"type\": \"numstepper\", \"label\": \"Select temperature for output:\", \"required\": false, \"integer\": false, \"min\": null, \"max\": null, \"stepsize\": 1}, {\"id\": \"text_temperature\", \"type\": \"text\", \"text\": \"Use the temperature control to govern how the LLM generates its response based on next word prediction.\", \"visible\": \"\"}, {\"id\": \"outputTable\", \"type\": \"outputtable\", \"label\": \"Provide output table:\", \"required\": true, \"placeholder\": \"\", \"visible\": \"\"}]}]}, {\"id\": \"config\", \"type\": \"page\", \"label\": \"Configuration\", \"children\": [{\"id\": \"section_gen_model\", \"type\": \"section\", \"label\": \"Text generation model\", \"open\": true, \"children\": [{\"id\": \"genModelDeployment\", \"type\": \"textfield\", \"label\": \"Provide name of your Azure OpenAI generation model deployment:\", \"placeholder\": \"\", \"required\": true, \"visible\": \"\"}]}, {\"id\": \"section_azure_openai\", \"type\": \"section\", \"label\": \"Azure OpenAI service:\", \"open\": true, \"children\": [{\"id\": \"azureKeyLocation\", \"type\": \"path\", \"label\": \"Provide path to your Azure OpenAI key:\", \"pathtype\": \"file\", \"placeholder\": \"\", \"required\": false, \"visible\": \"\"}, {\"id\": \"text_key_details\", \"type\": \"text\", \"text\": \"Ensure this key is located in a file saved in a secure folder.\", \"visible\": \"\"}, {\"id\": \"azureOpenAIEndpoint\", \"type\": \"textfield\", \"label\": \"Provide URL for Azure OpenAI service endpoint:\", \"placeholder\": \"\", \"required\": true, \"visible\": \"\"}, {\"id\": \"azureRegion\", \"type\": \"textfield\", \"label\": \"Provide region for Azure OpenAI service\", \"placeholder\": \"Default value: eastus2\", \"required\": false, \"visible\": \"\"}, {\"id\": \"openAIVersion\", \"type\": \"textfield\", \"label\": \"OpenAI API Version\", \"placeholder\": \"2024-10-21\", \"required\": false, \"visible\": \"\"}]}]}, {\"id\": \"about\", \"type\": \"page\", \"label\": \"About\", \"children\": [{\"id\": \"about_description\", \"type\": \"text\", \"text\": \"LLM - Azure OpenAI Zero-Shot Prompting==============================================This custom step helps you interact with a Large Language Model (LLM) interacting with an [Azure OpenAI](https://microsoftlearning.github.io/mslearn-openai/Instructions/Exercises/01-get-started-azure-openai.html) service to process simple instructions on specified input data. It uses a technique called zero-shot prompting which is useful for cases where the instruction provided to the LLM does not require additional detail or context.There exist both simple and involved (e.g. Retrieval Augmented Generation (RAG)) approaches for interacting with an LLM. Zero-shot prompting is useful for cases where the input data provides all the necessary context and information required for the LLM to process an instruction, and also, the instruction provided does not require a query to other data sources.Run inside a SAS session, this custom step takes either a SAS dataset or a CAS table as input and returns a SAS dataset (or CAS table) as output, with the response added as a new variable.\", \"visible\": \"\"}, {\"id\": \"section_prereqs\", \"type\": \"section\", \"label\": \"Prerequisites\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"text_prereqs\", \"type\": \"text\", \"text\": \"1. Python:  Python version 3.10 is recommended to avoid package support or dependency issues.\\n\\n2. Python packages to be installed:\\n\\n   i.    langchain: https://pypi.org/project/langchain/\\n   ii.   langchain-community: https://pypi.org/project/langchain-community/\\n   iii.  langchain-openai: https://pypi.org/project/langchain-openai/\\n  iv.   PyPDF: https://pypi.org/project/pypdf/\\n  v.    sentence-transformers: https://pypi.org/project/sentence-transformers/\\n  vi.   chromadb: https://pypi.org/project/chromadb/\\n  vii.  pysqlite-binary: https://pypi.org/project/pysqlite-binary/\\n\\n3. Viya 4 environment version 2024.01 or later\\n\\n4. Valid Azure OpenAI service with embedding & large language models deployed.  Refer here for instructions: https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart?tabs=command-line%2Cpython-new&pivots=programming-language-studio \\n\", \"visible\": \"\"}]}, {\"id\": \"section_assumptions\", \"type\": \"section\", \"label\": \"Assumptions\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"text_assumptions\", \"type\": \"text\", \"text\": \"Current assumptions for this initial versions (future versions may improve upon the same):\\n\\n1. Users  choose either an existing Chroma DB vector database collection or load PDF,  SAS dataset, pandas DataFrame or CSV files to an existing or new Chroma DB collection.\\n\\n2. Users may load all PDFs in a directory on the SAS Server (filesystem), or select a PDF/sas7bdat/DataFrame/CSV of their choice.\\n\\n3. The code assumes use of a Chroma DB vector store.  Users may choose to replace this with other supported vector stores.\\n\\n4. The code uses the langchain LLM framework.  \\n\\n5. PDFs (containing text), CSV, SAS datasets and pandas DataFrames are currently the only loadable file format allowed.  Users are however free to ingest various other document types into a Chroma DB collection beforehand, using the \\\"Vector Databases - Hydrate Chroma DB collection\\\" SAS Studio Custom Step (refer documentation)\\n\\n6. User has already configured Azure OpenAI to deploy both an embedding function and LLM service, or knows the deployment names. \\n\", \"visible\": \"\"}]}, {\"id\": \"about_parameters\", \"type\": \"section\", \"label\": \"Parameters\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"parameters_input\", \"type\": \"section\", \"label\": \"Input parameters\", \"open\": true, \"visible\": \"\", \"children\": [{\"id\": \"input_parameters_text\", \"type\": \"text\", \"text\": \"1. Source file location (optional, default is Context already loaded): in case you wish to present new source files to use as context,  choose either selecting a folder, file,SAS dataset. pandas DataFrame or a CSV file. Otherwise, provide the name of an existing vector store collection in Configuration.  Note that if choosing a SAS dataset, you must open an input port and attach a table to the custom step.\\n\\n2. Source column ( required if SAS dataset, DataFrame or CSV selected): in case a SAS dataset, pandas DataFrame or a CSV file's selected, users must specify a column within the data source as the main \\\"document\\\" source.  The other fields will be considered metadata.\\n\\n3. System prompt (text area, default provided, required): a default system prompt which instructs the LLM on how to handle the question is provided.  Note it makes use of template variables {context} and {question} referring to the context and question respectively.  Edit this system prompt if you'd like to change the style of the response.\\n\\n4. Question (text area, required): Provide your question to the LLM. Note that this will be added to additional system prompt, to create a prompt that will be passed to the LLM.\", \"visible\": \"\"}]}, {\"id\": \"parameters_output_specs\", \"type\": \"section\", \"label\": \"Output specifications\", \"open\": false, \"visible\": \"\", \"children\": [{\"id\": \"output_parameters_text\", \"type\": \"text\", \"text\": \"Results (the answer from the LLM) are printed by default to the output window.\\n\\n1. Temperature (numeric stepper, default 0): temperature for an LLM affects its abiity to predict the next word when generating responses.  A rule of thumb is that a temperature closer to 0 indicates the model uses the predicted next word with the highest probability, whereas a temperature of 1 increases the randomness with which the model predicts the next word.  \\n\\n2. Context size (numeric stepper, default 10): select how many similar results from the vector store should be retrieved and provided as context to the LLM.  Note that a higher number results in more tokens provided as part of the prompt.\\n\\n3. Output table (output port, option): attach either a CAS table or sas7bdat to the output port of this node to hold results.  These results contain the LLM's answer, the original question and supporting retrieved results.  \", \"visible\": \"\"}]}, {\"id\": \"parameters_config\", \"type\": \"section\", \"label\": \"Configuration \", \"open\": 1, \"visible\": \"\", \"children\": [{\"id\": \"output_parameters_text_1\", \"type\": \"text\", \"text\": \"1. Embedding model (text field, required):  provide the name of your Azure OpenAI deployment of an OpenAI embedding model. For convenience, it's suggested to use the same name as the model you wish to use. For example, if your OpenAI embedding model happens to be text-embedding-3-small, use the same name for your deployment. \\n\\n2. Vector Store persistent path (text field, defaults to /tmp if blank): provide a path to a ChromaDB database.  If blank, this defaults to /tmp on the filesystem. \\n\\n3. Chroma DB collection name (text field): provide name of the Chroma DB collection you wish to use.  If the collection does not exist, a new one will be created. Ensure you have write access to the persistent area.\\n\\n4. Text generation model (text field, required): provide the name of an Azure OpenAI text generation deployment.  For convenience, you may choose to use the same name as the OpenAI LLM. Example, gpt-35-turbo to gpt-35-turbo.\\n\\n5. Azure OpenAI service details (file selector for key and text fields, required): provide a path to your Azure OpenAI access key.  Ensure this key is saved within a text file in a secure location on the filesystem.  Users are responsible for providing their keys to use this service.  In addition, also refer to your Azure OpenAI service to obtain the service endpoint and region. The OpenAI API version can be changed if required.\", \"visible\": \"\"}]}]}, {\"id\": \"about_runtimecontrol\", \"type\": \"section\", \"label\": \"Run-time Control\", \"open\": 0, \"visible\": \"\", \"children\": [{\"id\": \"runtimecontrol_text\", \"type\": \"text\", \"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\n\\nThe following macro variable,\\n\\n_aor_run_trigger\\n\\nwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.\\n\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.\\n\\nTo \\\"disable\\\" this step, run the following code upstream:\\n\\n%global _aor_run_trigger;\\n%let _aor_run_trigger =0;\\n\\nTo \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):\\n\\n%let _aor_run_trigger =1;\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\", \"visible\": \"\"}]}, {\"id\": \"about_documentation\", \"type\": \"section\", \"label\": \"Documentation\", \"open\": 0, \"visible\": \"\", \"children\": [{\"id\": \"documentation_text\", \"type\": \"text\", \"text\": \"1.  Azure OpenAI service: https://learn.microsoft.com/en-us/azure/ai-services/openai/\\n\\n2. Documentation for the chromadb Python package: https://docs.trychroma.com\\n\\n3.  Documentation for the \\\"Vector Databases - Hydrate Chroma DB collection\\\" SAS Studio Custom Step: https://github.com/sassoftware/sas-studio-custom-steps/tree/main/Vector%20Databases%20-%20Hydrate%20Chroma%20DB%20Collection\\n\\n4. An important note regarding sqlite: https://docs.trychroma.com/troubleshooting#sqlite\\n\\n5. SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n\\n6. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n\\n7.  Options for persistent clients and client connections in Chroma: https://docs.trychroma.com/usage-guide\\n\\n8. Langchain Python documentation: https://python.langchain.com/docs/get_started/introduction\\n\\n9. OpenAI API versions change periodically. Keep track of them here: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation\", \"visible\": \"\"}]}, {\"id\": \"version_text\", \"type\": \"text\", \"text\": \"Version: 1.0  (31JAN2025)\", \"visible\": \"\"}, {\"id\": \"contact_text\", \"type\": \"text\", \"text\": \"Created/contact: \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\", \"visible\": \"\"}]}], \"values\": {\"inputData\": {\"library\": \"\", \"table\": \"\"}, \"textCol\": [], \"docId\": [], \"copyVarList\": [], \"systemPrompt\": \"\", \"userPrompt\": \"\", \"temperature\": null, \"outputTable\": {\"library\": \"\", \"table\": \"\"}, \"genModelDeployment\": \"\", \"azureKeyLocation\": \"\", \"azureOpenAIEndpoint\": \"https://<your_openai_service>.azure.com/\", \"azureRegion\": \"eastus2\", \"openAIVersion\": \"2024-10-21\"}}", "templates": {"SAS": "/* SAS templated code goes here */\n\n/* -------------------------------------------------------------------------------------------* \n   LLM - Azure OpenAI Zero-Shot Prompting\n\n   v 1.0.0 (23JAN2025)\n\n   This program interacts with an Azure OpenAI Large Language Model (LLM) service to process \n   simple instructions on specified input data  and is meant for use within a SAS Studio Custom \n   Step. Please modify requisite macro variables (hint: use the debug section as a reference) \n   to run this through other interfaces, such as a SAS Program editor or the SAS extension \n   for Visual Studio Code.\n\n   Sundaresh Sankaran (sundaresh.sankaran@sas.com|sundaresh.sankaran@gmail.com)\n   Crystal Baker (crystal.baker@sas.com)\n*-------------------------------------------------------------------------------------------- */\n\n/*-----------------------------------------------------------------------------------------*\n   DEBUG Section\n   Code under the debug section SHOULD ALWAYS remain commented unless you are tinkering with  \n   or testing the step!\n*------------------------------------------------------------------------------------------*/\n\n/* Provide test values for the parameters */\n\n/*\n\n%let inputData = ;\n%let systemPrompt = ;\n%let userPrompt = ;\n%let temperature = ;\n%let outputTable = ;\n%let genModelDeployment = ;\n%let azureKeyLocation = ;\n%let azureOpenAIEndpoint = ;\n%let azureRegion = ;\n%let openAIVersion = ;\n\n\n*/;\n\n/*-----------------------------------------------------------------------------------------*\n   END DEBUG Section\n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\n\nfilename azpcode temp;\n\ndata _null_;\n\n   length line $32767;               * max SAS character size ;\n   infile datalines4 truncover pad;\n   input ;   \n   file azpcode;\n   line = strip(_infile_);           * line without leading and trailing blanks ;\n   l1 = length(trimn(_infile_));     * length of line without trailing blanks ;\n   l2 = length(line);                * length of line without leading and trailing blanks ;\n   first_position=l1-l2+1;           * position where the line should start (alignment) ;\n   if (line eq ' ') then put @1;     * empty line ;\n   else put @first_position line;    * line without leading and trailing blanks correctly aligned ;\n\n   datalines4;\n\n############################################################################################################\n#   Functions\n############################################################################################################\n\ndef get_client(endpoint = None, api_key = None, api_version = None):\n    from openai import AzureOpenAI\n    import os\n    if endpoint is None:\n        endpoint = os.environ[\"AZURE_OPENAI_ENDPOINT\"] \n    if api_key is None:\n        api_key = os.environ[\"AZURE_OPENAI_API_KEY\"] \n    if api_version is None:\n        api_version = os.environ[\"AZURE_OPENAI_API_VERSION\"]\n\n    client = AzureOpenAI( api_key = api_key,  api_version = api_version, azure_endpoint = endpoint)\n    return client\n\ndef get_prompt(system_prompt = None, user_prompt = None, context = None):\n    if system_prompt is None:\n        system_prompt = \"You are a helpful assistant. For each call, use provided context (Context:) to answer a provided question (Question:) in a concise manner.  Return only the answer.\"\n    if user_prompt is None:\n        user_prompt = \"Echo whatever is provided as context.\"\n    if context is None:\n        context = \"Echo\"\n    return [\n    {\n        \"role\": \"system\",\n        \"content\": system_prompt\n    },\n    {\n        \"role\": \"user\",\n        \"content\": f\"Question: {user_prompt}. Context: {context}\" \n    }\n    ]\n\ndef call_llm(prompt = None, client = None, deployment = deployment_name, temperature = temperature):\n    if prompt is None:\n        prompt = get_prompt()\n    if client is None:\n        client = get_client()\n    if deployment is None:\n        deployment = os.environ[\"DEPLOYMENT_NAME\"]\n    if temperature is None:\n        temperature = 0.7\n    completion = client.chat.completions.create(\n        model = deployment,\n        messages = prompt,\n        temperature = temperature\n    )  \n    return completion.choices[0].message.content\n\ndef execute(context = None, user_prompt=None, system_prompt= None):\n    prompt = get_prompt(context = context, user_prompt = user_prompt, system_prompt = system_prompt)\n    client = get_client()\n    return call_llm(prompt = prompt, client = client)\n\n############################################################################################################\n#   Execution code\n############################################################################################################\n\n# Obtain values from UI\n\ninput_data_ref = SAS.symget('inputData')\ninput_data = SAS.sd2df(input_data_ref)\n\ntext_column = SAS.symget('textCol')\nuser_prompt = SAS.symget('userPrompt')\nsystem_prompt = SAS.symget('systemPrompt')\ntemperature = SAS.symget('temperature')\ndeployment_name = SAS.symget('genModelDeployment')\napi_key = SAS.symget('azureKeyLocation')\napi_version = SAS.symget('openAIVersion')\nendpoint = SAS.symget('azureOpenAIEndpoint')\n\n\ninput_data[\"response\"] = input_data[text_column].apply(execute, user_prompt = user_prompt, system_prompt = system_prompt)\n\n;;;;\nrun;   \n\n/*-----------------------------------------------------------------------------------------*\n   MACROS\n*------------------------------------------------------------------------------------------*/\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: A description to add to the error flag.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n   %global &errorFlagDesc.;\n\n%mend _create_error_flag;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to capture indicator and UUIDof any currently active CAS session.\n   UUID is not expensive and can be used in future to consider graceful reconnect.\n\n   Input:\n   1. errorFlagName: name of an error flag that gets populated in case the connection is \n                     not active. Provide this value in quotes when executing the macro.\n                     Define this as a global macro variable in order to use downstream.\n   2. errorFlagDesc: Name of a macro variable which can hold a descriptive message output\n                     from the check.\n                     \n   Output:\n   1. Informational note as required. We explicitly don't provide an error note since \n      there is an easy recourse(of being able to connect to CAS)\n   2. UUID of the session: macro variable which gets created if a session exists.\n   3. errorFlagName: populated\n   4. errorFlagDesc: populated\n*------------------------------------------------------------------------------------------*/\n\n%macro _env_cas_checkSession(errorFlagName, errorFlagDesc);\n    %global casSessionExists;\n    %if %sysfunc(symexist(_current_uuid_)) %then %do;\n       %symdel _current_uuid_;\n    %end;\n    %if %sysfunc(symexist(_SESSREF_)) %then %do;\n      %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n      %if &casSessionExists.=1 %then %do;\n         %global _current_uuid_;\n         %let _current_uuid_=;   \n         proc cas;\n            session.sessionId result = sessresults;\n            call symputx(\"_current_uuid_\", sessresults[1]);\n         quit;\n         %put NOTE: A CAS session &_SESSREF_. is currently active with UUID &_current_uuid_. ;\n         data _null_;\n            call symputx(&errorFlagName., 0);\n            call symput(&errorFlagDesc., \"CAS session is active.\");\n         run;\n      %end;\n      %else %do;\n         %put NOTE: Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream. ;\n         data _null_;\n            call symputx(&errorFlagName., 1);\n            call symput(&errorFlagDesc., \"Unable to find a currently active CAS session. Reconnect or connect to a CAS session upstream.\");\n        run;\n      %end;\n   %end;\n   %else %do;\n      %put NOTE: No active CAS session ;\n      data _null_;\n        call symputx(&errorFlagName., 1);\n        call symput(&errorFlagDesc., \"No active CAS session. Connect to a CAS session upstream.\");\n      run;\n   %end;\n\n%mend _env_cas_checkSession;   \n\n/*-----------------------------------------------------------------------------------------*\n   Caslib for a Libname macro\n   \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname\n   and assumes that the libname is using the CAS engine.\n \n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n   \n   From macro provided by Wilbram Hazejager (wilbram.hazejager@sas.com)\n\n   Inputs:\n   - _usr_LibrefUsingCasEngine : A library reference provided by the user which is based \n                                 on a CAS engine.\n   \n   Outputs:\n   - _usr_nameCaslib : Global macro variable containing the caslib name.\n*------------------------------------------------------------------------------------------*/\n \n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine);\n \n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n \n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n   /*--------------------------------------------------------------------------------------*\n      Note that we output a NOTE instead of an ERROR for the below condition since the \n      execution context determines whether this is an error or just an informational note.\n   *---------------------------------------------------------------------------------------*/\n   %if \"&_usr_nameCaslib.\" = \"\" %then %put NOTE: The caslib name for the &_usr_LibrefUsingCasEngine. is blank.;\n \n%mend _usr_getNameCaslib;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to check if a given libref belongs to a SAS or CAS engine.\n\n   Input:\n   1. sasCasLibref: a libref to be checked. Do not quote.\n   2. tableEngine: a flag to hold the table Engine value.\n   3. errorFlagName: a flag to populate an error code with.\n   4. errorFlagDesc: a flag to describe the error if one occurs.\n   5. sessionExists: an indicator (1) whether an active CAS session exists.  If not(0),\n                     it will be created.\n                     \n   Output:\n   1. tableEngine: populated with SAS or CAS\n   2. errorFlagName: populated with 1 if an error and 0 if not\n   3. errorFlagDesc: populated in case of an error\n*------------------------------------------------------------------------------------------*/\n\n%macro _sas_or_cas(sasCasLibref, tableEngine, errorFlagName, errorFlagDesc, sessionExists);\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ ;\n      caslib _ALL_ assign;\n   %end;\n\n    proc sql noprint;\n        select distinct Engine into:&&tableEngine. from dictionary.libnames where libname = upcase(\"&sasCasLibref.\");\n    quit;\n\n    %put \"&&&tableEngine.\";\n\n    %if %sysfunc(compress(\"&&&tableEngine.\")) = \"V9\" %THEN %DO;\n        data _null_;\n            call symput(\"&tableEngine.\",\"SAS\");\n            call symputx(\"&errorFlag.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %end;\n    %else %if %sysfunc(compress(\"&&&tableEngine.\")) = \"CAS\" %THEN %DO;\n        data _null_;\n            call symputx(\"&errorFlagName.\",0);\n            call symput(\"&errorFlagDesc.\",\"\");\n        run;\n    %END;\n    %else %do;\n        data _null_;\n            call symputx(\"&errorFlagName.\",1);\n            call symput(\"&errorFlagDesc.\",\"Unable to associate libref with either SAS or CAS. Check the input libref provided.\");\n        run;\n    %end;\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ terminate;\n   %end;\n    \n%mend _sas_or_cas;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to check if an in-memory table exists.\n\n   Input:\n   1. tableName: name of the in-memory table\n   2. tableLib: caslib backing the in-memory table\n   3. sessionExists: an indicator (1) whether an active CAS session exists.  If not(0),\n                     it will be created.\n                     \n   Output:\n   1. tableExists: populated with 0 if does not exist, 1 if exists with local scope, \n                   2 if exists with global scope\n\n*------------------------------------------------------------------------------------------*/   \n\n%macro _cas_table_exists(tableName, tableLib, sessionExists, tableExists);\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ ;\n      caslib _ALL_ assign;\n   %end;\n\n   proc cas;\n      table.tableExists result = rc /\n         name=\"&tableName.\",\n         caslib=\"&tableLib.\"\n      ;\n      call symputx(\"&tableExists.\",rc.exists);\n   quit;\n\n   %if &sessionExists. = 0 %then %do;\n      cas _temp_ss_ terminate;\n   %end;\n    \n%mend _cas_table_exists;\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n\n   _azp prefix stands for Azure Zero-shot Prompting\n*------------------------------------------------------------------------------------------*/\n%macro _azp_execution_code;\n\n%mend _azp_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACROS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n   \n/*-----------------------------------------------------------------------------------------*\n   Create Runtime Trigger\n*------------------------------------------------------------------------------------------*/\n%_create_runtime_trigger(_azp_run_trigger);\n\n/*-----------------------------------------------------------------------------------------*\n   Execute \n*------------------------------------------------------------------------------------------*/\n\n\n\n%if &_azp_run_trigger. = 1 %then %do;\n\n   %_azp_execution_code;\n\n%end;\n\n%if &_azp_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_azp_error_flag. ;\n%put &_azp_error_desc.;\n%put NOTE: Error desc - &_azp_error_desc. ;\n\n/*-----------------------------------------------------------------------------------------*\n   END EXECUTION CODE\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n\n%if %symexist(__) %then %do;\n   %symdel __;\n%end;\n\n%sysmacdelete _create_error_flag;\n%sysmacdelete _env_cas_checkSession;\n%sysmacdelete _usr_getNameCaslib;\n%sysmacdelete _sas_or_cas;\n%sysmacdelete _cas_table_exists;\n%sysmacdelete _azp_execution_code;\n\n\n"}}