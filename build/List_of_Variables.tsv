	variable	description	type	value
0	params	Parameters	page	
1	section_input_params	Parameters	section	
2	inputData	Select input data:	inputtable	
3	textCol	Select text column:	columnselector	
4	docId	Select ID column:	columnselector	
5	copyVarList	Select additional columns to copy over:	columnselector	
6	section_prompts	Prompts	section	
7	systemPrompt	Provide system prompt:	textarea	
8	text_system_prompt		text	Use the system prompt to provide broad instructions to the LLM such as role, task description and response specification.
9	userPrompt	Provide user prompt:	textarea	
10	text_user_prompt		text	Use the user prompt to provide specific instructions on the task to perform.  Use tags like {Question}, {Context} etc. to refer to the context provided.
11	section_output_specs	Output specification	section	
12	temperature	Select temperature for output:	numstepper	
13	text_temperature		text	Use the temperature control to govern how the LLM generates its response based on next word prediction.
14	outputTable	Provide output table:	outputtable	
15	config	Configuration	page	
16	section_gen_model	Text generation model	section	
17	genModelDeployment	Provide name of your Azure OpenAI generation model deployment:	textfield	
18	section_azure_openai	Azure OpenAI service:	section	
19	azureKeyLocation	Provide path to your Azure OpenAI key:	path	
20	text_key_details		text	Ensure this key is located in a file saved in a secure folder.
21	azureOpenAIEndpoint	Provide URL for Azure OpenAI service endpoint:	textfield	
22	azureRegion	Provide region for Azure OpenAI service	textfield	
23	openAIVersion	OpenAI API Version	textfield	
24	about	About	page	
25	about_description		text	LLM - Azure OpenAI Zero-Shot Prompting==============================================This custom step helps you interact with a Large Language Model (LLM) interacting with an [Azure OpenAI](https://microsoftlearning.github.io/mslearn-openai/Instructions/Exercises/01-get-started-azure-openai.html) service to process simple instructions on specified input data. It uses a technique called zero-shot prompting which is useful for cases where the instruction provided to the LLM does not require additional detail or context.There exist both simple and involved (e.g. Retrieval Augmented Generation (RAG)) approaches for interacting with an LLM. Zero-shot prompting is useful for cases where the input data provides all the necessary context and information required for the LLM to process an instruction, and also, the instruction provided does not require a query to other data sources.Run inside a SAS session, this custom step takes either a SAS dataset or a CAS table as input and returns a SAS dataset (or CAS table) as output, with the response added as a new variable.
26	section_prereqs	Prerequisites	section	
27	text_prereqs		text	1. Python:  Python version 3.10 is recommended to avoid package support or dependency issues.2. Python packages to be installed:   i.    langchain: https://pypi.org/project/langchain/   ii.   langchain-community: https://pypi.org/project/langchain-community/   iii.  langchain-openai: https://pypi.org/project/langchain-openai/  iv.   PyPDF: https://pypi.org/project/pypdf/  v.    sentence-transformers: https://pypi.org/project/sentence-transformers/  vi.   chromadb: https://pypi.org/project/chromadb/  vii.  pysqlite-binary: https://pypi.org/project/pysqlite-binary/3. Viya 4 environment version 2024.01 or later4. Valid Azure OpenAI service with embedding & large language models deployed.  Refer here for instructions: https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart?tabs=command-line%2Cpython-new&pivots=programming-language-studio
28	section_assumptions	Assumptions	section	
29	text_assumptions		text	"Current assumptions for this initial versions (future versions may improve upon the same):1. Users  choose either an existing Chroma DB vector database collection or load PDF,  SAS dataset, pandas DataFrame or CSV files to an existing or new Chroma DB collection.2. Users may load all PDFs in a directory on the SAS Server (filesystem), or select a PDF/sas7bdat/DataFrame/CSV of their choice.3. The code assumes use of a Chroma DB vector store.  Users may choose to replace this with other supported vector stores.4. The code uses the langchain LLM framework.  5. PDFs (containing text), CSV, SAS datasets and pandas DataFrames are currently the only loadable file format allowed.  Users are however free to ingest various other document types into a Chroma DB collection beforehand, using the ""Vector Databases - Hydrate Chroma DB collection"" SAS Studio Custom Step (refer documentation)6. User has already configured Azure OpenAI to deploy both an embedding function and LLM service, or knows the deployment names."
30	about_parameters	Parameters	section	
31	parameters_input	Input parameters	section	
32	input_parameters_text		text	"1. Source file location (optional, default is Context already loaded): in case you wish to present new source files to use as context,  choose either selecting a folder, file,SAS dataset. pandas DataFrame or a CSV file. Otherwise, provide the name of an existing vector store collection in Configuration.  Note that if choosing a SAS dataset, you must open an input port and attach a table to the custom step.2. Source column ( required if SAS dataset, DataFrame or CSV selected): in case a SAS dataset, pandas DataFrame or a CSV file's selected, users must specify a column within the data source as the main ""document"" source.  The other fields will be considered metadata.3. System prompt (text area, default provided, required): a default system prompt which instructs the LLM on how to handle the question is provided.  Note it makes use of template variables {context} and {question} referring to the context and question respectively.  Edit this system prompt if you'd like to change the style of the response.4. Question (text area, required): Provide your question to the LLM. Note that this will be added to additional system prompt, to create a prompt that will be passed to the LLM."
33	parameters_output_specs	Output specifications	section	
34	output_parameters_text		text	Results (the answer from the LLM) are printed by default to the output window.1. Temperature (numeric stepper, default 0): temperature for an LLM affects its abiity to predict the next word when generating responses.  A rule of thumb is that a temperature closer to 0 indicates the model uses the predicted next word with the highest probability, whereas a temperature of 1 increases the randomness with which the model predicts the next word.  2. Context size (numeric stepper, default 10): select how many similar results from the vector store should be retrieved and provided as context to the LLM.  Note that a higher number results in more tokens provided as part of the prompt.3. Output table (output port, option): attach either a CAS table or sas7bdat to the output port of this node to hold results.  These results contain the LLM's answer, the original question and supporting retrieved results.
35	parameters_config	Configuration 	section	
36	output_parameters_text_1		text	1. Embedding model (text field, required):  provide the name of your Azure OpenAI deployment of an OpenAI embedding model. For convenience, it's suggested to use the same name as the model you wish to use. For example, if your OpenAI embedding model happens to be text-embedding-3-small, use the same name for your deployment. 2. Vector Store persistent path (text field, defaults to /tmp if blank): provide a path to a ChromaDB database.  If blank, this defaults to /tmp on the filesystem. 3. Chroma DB collection name (text field): provide name of the Chroma DB collection you wish to use.  If the collection does not exist, a new one will be created. Ensure you have write access to the persistent area.4. Text generation model (text field, required): provide the name of an Azure OpenAI text generation deployment.  For convenience, you may choose to use the same name as the OpenAI LLM. Example, gpt-35-turbo to gpt-35-turbo.5. Azure OpenAI service details (file selector for key and text fields, required): provide a path to your Azure OpenAI access key.  Ensure this key is saved within a text file in a secure location on the filesystem.  Users are responsible for providing their keys to use this service.  In addition, also refer to your Azure OpenAI service to obtain the service endpoint and region. The OpenAI API version can be changed if required.
37	about_runtimecontrol	Run-time Control	section	
38	runtimecontrol_text		text	"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.Refer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.The following macro variable,_aor_run_triggerwill initialize with a value of 1 by default, indicating an ""enabled"" status and allowing the custom step to run.If you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This ""disables"" execution of the custom step.To ""disable"" this step, run the following code upstream:%global _aor_run_trigger;%let _aor_run_trigger =0;To ""enable"" this step again, run the following (it's assumed that this has already been set as a global variable):%let _aor_run_trigger =1;IMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program."
39	about_documentation	Documentation	section	
40	documentation_text		text	"1.  Azure OpenAI service: https://learn.microsoft.com/en-us/azure/ai-services/openai/2. Documentation for the chromadb Python package: https://docs.trychroma.com3.  Documentation for the ""Vector Databases - Hydrate Chroma DB collection"" SAS Studio Custom Step: https://github.com/sassoftware/sas-studio-custom-steps/tree/main/Vector%20Databases%20-%20Hydrate%20Chroma%20DB%20Collection4. An important note regarding sqlite: https://docs.trychroma.com/troubleshooting#sqlite5. SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/8474596. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi 7.  Options for persistent clients and client connections in Chroma: https://docs.trychroma.com/usage-guide8. Langchain Python documentation: https://python.langchain.com/docs/get_started/introduction9. OpenAI API versions change periodically. Keep track of them here: https://learn.microsoft.com/en-us/azure/ai-services/openai/api-version-deprecation"
41	version_text		text	Version: 1.0  (14DEC2024)
42	contact_text		text	Created/contact: - Sundaresh Sankaran (sundaresh.sankaran@sas.com) - Crystal Baker (Crystal.Baker@sas.com)
